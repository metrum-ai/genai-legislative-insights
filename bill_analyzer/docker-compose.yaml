# Created by Metrum AI for Dell
services:
  redis:
    image: "valkey/valkey:7.2.6"

  vllm_serving_0:
    image: vllm-cpu-env
    privileged: 'true'
    command:
    - --model=${MODEL_NAME}
    - --enable-prefix-caching
    - --chat-template=None
    environment:
    - HUGGING_FACE_HUB_TOKEN=${HF_TOKEN}
    - VLLM_CPU_OMP_THREADS_BIND=0-127
    - VLLM_CPU_KVCACHE_SPACE=80
    volumes:
    - ${MODELS_MOUNT_PATH}:/root/.cache/huggingface:rw

  vllm_serving_1:
    image: vllm-cpu-env
    privileged: 'true'
    command:
    - --model=${MODEL_NAME}
    - --enable-prefix-caching
    - --chat-template=None
    environment:
    - HUGGING_FACE_HUB_TOKEN=${HF_TOKEN}
    - VLLM_CPU_OMP_THREADS_BIND=128-255
    - VLLM_CPU_KVCACHE_SPACE=80
    volumes:
    - ${MODELS_MOUNT_PATH}:/root/.cache/huggingface:rw

  etcd:
    image: quay.io/coreos/etcd:v3.5.5
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/etcd:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio:
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/minio:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  milvus:
    image: milvusdb/milvus:v2.4.13-hotfix
    command: ["milvus", "run", "standalone"]
    security_opt:
    - seccomp:unconfined
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/milvus:/var/lib/milvus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    depends_on:
      - "etcd"
      - "minio"

  prefect-server:
    image: prefecthq/prefect:3-latest
    environment:
      - PREFECT_SERVER_API_HOST=0.0.0.0
      - PREFECT_UI_API_URL=http://localhost:8100/prefect/api
      - PREFECT_UI_SERVE_BASE=/prefect
    command: prefect server start

  ingestion:
    build:
      context: ./backend/ingestion
      dockerfile: Dockerfile
    env_file: ".env"
    volumes:
      - ${MODELS_MOUNT_PATH}:/root/.cache/huggingface:rw
    depends_on:
      - milvus

  serve:
    build:
      context: ./backend/bill
      dockerfile: Dockerfile
    env_file: ".env"

    command: python3 serve.py
    volumes:
      - temp-files:/tmp
      - ${MODELS_MOUNT_PATH}:/root/.cache/huggingface:rw
    depends_on:
      - prefect-server
      - milvus
    restart: always

  api:
    build:
      context: ./backend/api
      dockerfile: Dockerfile
    env_file: ".env"
    environment:
      - SECRET_KEY=${API_KEY}
    volumes:
      - temp-files:/tmp
    depends_on:
      - prefect-server
      - redis

#Metrics

  node_exporter:
    image: quay.io/prometheus/node-exporter:v1.8.2
    privileged: true
    command:
      - '--path.rootfs=/host --collector.perf --log.level=debug'
    pid: host
    volumes:
      - '/:/host:ro,rslave'

  ipmi_exporter:
    image: prometheuscommunity/ipmi-exporter:v1.9.0
    privileged: true
    user: root

  prometheus:
    image: prom/prometheus:v2.55.1
    ports:
      - 9090:9090
    volumes:
      - ./metrics/config/prometheus.yaml:/etc/prometheus/prometheus.yml
    depends_on:
      - ipmi_exporter
      - node_exporter

  e_smi_tool:
    build:
      context: ./metrics/
      dockerfile: Dockerfile
    privileged: true
    devices:
      - /dev/cpu
      - /dev/dri
    volumes:
      - /home/perf/esmi_ib_library/build:/root/esmi_ib_library/build

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile

  nginx-proxy:
    image:  nginx:alpine
    ports:
      - "8100:8100"
    volumes:
      - ./configs/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - frontend
      - serve

volumes:
  temp-files: {}
